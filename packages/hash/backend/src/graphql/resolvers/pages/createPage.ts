import { entities } from "../../../mockData/entities";
import { DbPage } from "../../../types/dbTypes";
import {
  MutationCreatePageArgs,
  Resolver,
  Visibility,
} from "../../autoGeneratedTypes";
import { createEntity } from "../entity";

let i = 100;

export const createPage: Resolver<
  Promise<DbPage>,
  {},
  {},
  MutationCreatePageArgs
> = async (_, { namespaceId, properties }) => {
  const now = new Date();

  const newHeaderEntity = await (createEntity as any)(undefined, {
    namespaceId,
    type: "Text",
    properties: {
      texts: [{ text: properties.title, bold: true }],
    },
  });

  const newHeaderBlock = await (createEntity as any)(undefined, {
    namespaceId,
    type: "Block",
    properties: {
      componentId: "https://block.blockprotocol.org/header",
      entityType: "Header",
      entityId: newHeaderEntity.id,
    },
  });

  const newParaEntity = await (createEntity as any)(undefined, {
    namespaceId,
    type: "Text",
    properties: {
      texts: [],
    },
  });
  const newParaBlock = await (createEntity as any)(undefined, {
    namespaceId,
    type: "Block",
    properties: {
      componentId: "https://block.blockprotocol.org/paragraph",
      entityType: "Text",
      entityId: newParaEntity.id,
    },
  });

  const page: DbPage = {
    id: `page${i++}`,
    namespaceId,
    properties: {
      title: properties.title,
      contents: [
        {
          entityId: newHeaderBlock.id,
        },
        {
          entityId: newParaBlock.id,
        },
      ],
    },
    createdById: "1",
    type: "Page",
    updatedAt: now,
    createdAt: now,
    visibility: Visibility.Public,
  };

  entities.push(page);

  return page;
};
