import { ApolloError } from "apollo-server-express";

import { QueryPageArgs, Resolver, Visibility } from "../../autoGeneratedTypes";
import { DbPage } from "../../../types/dbTypes";
import { GraphQLContext } from "../../context";

export const page: Resolver<
  Promise<DbPage>,
  {},
  GraphQLContext,
  QueryPageArgs
> = async (_, { accountId, id }, { dataSources }) => {
  const entity = await dataSources.db.getEntity({
    accountId,
    entityId: id,
  });
  if (!entity) {
    throw new ApolloError(`Page id ${id} not found`, "NOT_FOUND");
  }
  if (entity.type !== "Page") {
    throw new ApolloError(`Entity ${id} is type "${entity.type}" not "Page"`);
  }

  // TODO: get visibility from entity metadata
  return {
    ...entity,
    id: entity.entityId,
    accountId: entity.accountId,
    visibility: Visibility.Public,
  } as DbPage;
};
