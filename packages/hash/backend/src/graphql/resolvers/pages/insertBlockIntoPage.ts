import { ApolloError } from "apollo-server-express";

import { DbPage } from "../../../types/dbTypes";
import {
  MutationInsertBlockIntoPageArgs,
  Resolver,
} from "../../autoGeneratedTypes";
import { entities } from "../../../mockData/entities";
import { createEntity } from "../entity";

export const insertBlockIntoPage: Resolver<
  Promise<DbPage>,
  {},
  {},
  MutationInsertBlockIntoPageArgs
> = async (
  _,
  {
    componentId,
    entityId,
    entityProperties,
    entityType,
    namespaceId,
    pageId,
    position,
  }
) => {
  const page = entities.find(
    (entity) => entity.type === "Page" && entity.id === pageId
  ) as DbPage;

  if (!entityId && !(entityProperties && entityType)) {
    throw new Error(
      `One of entityId OR entityProperties and entityType must be provided`
    );
  }

  if (!page) {
    throw new ApolloError(
      `Could not find page with pageId ${pageId}`,
      "NOT_FOUND"
    );
  }

  if (!namespaceId) {
    namespaceId = page.namespaceId;
  }

  // TODO fix typing for calling resolvers like this
  const newEntity = await (createEntity as any)(undefined, {
    namespaceId,
    type: entityType,
    properties: entityProperties,
  });

  const blockProperties = {
    componentId,
    entityType,
    entityId: newEntity.id,
  };

  const newBlock = await (createEntity as any)(undefined, {
    namespaceId,
    type: entityType,
    properties: blockProperties,
  });

  if (position > page.properties.contents.length) {
    position = page.properties.contents.length;
  }

  page.properties.contents = [
    ...page.properties.contents.slice(0, position),
    { entityId: newBlock.id },
    ...page.properties.contents.slice(position),
  ];

  page.updatedAt = new Date();

  return page;
};
