import { DbPage } from "../../../types/dbTypes";
import { MutationUpdatePageArgs, Resolver } from "../../autoGeneratedTypes";
import { GraphQLContext } from "../../context";

export const updatePage: Resolver<
  Promise<DbPage>,
  {},
  GraphQLContext,
  MutationUpdatePageArgs
> = async (_, { namespaceId, id, properties }, { dataSources }) => {
  // TODO: we should have the getEntity and updateEntity here in the same database
  // transaction.
  const existingEntity = await dataSources.db.getEntity({ namespaceId, id });

  // TODO: catch error and check if it's a not found
  const updatedEntities = await dataSources.db.updateEntity({
    namespaceId,
    id,
    properties: {
      ...(existingEntity?.properties ?? {}),
      ...properties,
    },
    type: "Page",
  });

  // TODO: for now, all entities are non-versioned, so the list array only have a single
  // element. Return when versioned entities are implemented at the API layer.
  return updatedEntities[0] as DbPage;
};
