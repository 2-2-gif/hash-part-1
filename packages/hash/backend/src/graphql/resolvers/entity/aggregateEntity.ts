import {
  QueryAggregateEntityArgs,
  Resolver,
  AggregateOperation,
} from "../../autoGeneratedTypes";
import { entities } from "../../../mockData/entities";
import { DbUnknownEntity } from "../../../types/dbTypes";

export const aggregateEntity: Resolver<
  Promise<{
    results: DbUnknownEntity[];
    operation: AggregateOperation;
  }>,
  {},
  {},
  QueryAggregateEntityArgs
> = async (_, { operation, type }) => {
  const page = operation?.page || 1;
  const perPage = operation?.perPage || 10;
  const sort = operation?.sort?.field || "updatedAt";

  const startIndex = (page ?? 1) - 1;
  const endIndex = startIndex + (perPage ?? 10);

  const dbEntities = entities
    .filter((entity) => entity.type === type)
    .slice(startIndex, endIndex)
    .sort(
      (a, b) =>
        (a as any)[sort || "updatedAt"] - (b as any)[sort || "updatedAt"]
    ) as DbUnknownEntity[];

  return {
    results: dbEntities,
    operation: {
      page,
      perPage,
      sort,
    },
  };
};
