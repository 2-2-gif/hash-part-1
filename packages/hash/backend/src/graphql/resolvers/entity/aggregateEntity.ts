import {
  QueryAggregateEntityArgs,
  Resolver,
  AggregateOperation,
} from "../../autoGeneratedTypes";
// import { entities } from "../../../mockData/entities";
import { DbUnknownEntity } from "../../../types/dbTypes";
import { GraphQLContext } from "../../context";

export const aggregateEntity: Resolver<
  Promise<{
    results: DbUnknownEntity[];
    operation: AggregateOperation;
  }>,
  {},
  GraphQLContext,
  QueryAggregateEntityArgs
> = async (_, { namespaceId, operation, type }, { dataSources }) => {
  const page = operation?.page || 1;
  const perPage = operation?.perPage || 10;
  const sort = operation?.sort || "updatedAt";

  const startIndex = (page ?? 1) - 1;
  const endIndex = startIndex + (perPage ?? 10);

  // TODO: this returns an array of all entities of the given type in the namespace.
  // We should perform the sorting & filtering in the database for better performance.
  // For pagination, using a database cursor may be an option.
  const entities = await dataSources.db.getEntitiesByType({
    namespaceId,
    type,
  });

  const dbEntities = entities
    .filter((entity) => entity.type === type)
    .slice(startIndex, endIndex)
    .sort(
      (a, b) =>
        (a as any)[sort || "updatedAt"] - (b as any)[sort || "updatedAt"]
    ) as DbUnknownEntity[];

  return {
    results: dbEntities,
    operation: {
      page,
      perPage,
      sort,
    },
  };
};
