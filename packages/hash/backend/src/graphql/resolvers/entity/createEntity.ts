import { UserInputError } from "apollo-server-express";
import { Uuid4 } from "id128";

import { entities } from "../../../mockData/entities";
import { DbUnknownEntity } from "../../../types/dbTypes";
import {
  MutationCreateEntityArgs,
  Resolver,
  Visibility,
} from "../../autoGeneratedTypes";
import { namespaceIdFromNamespaceName } from "../shared/namespace";
import { GraphQLContext } from "../../context";


export const createEntity: Resolver<
  Promise<DbUnknownEntity>,
  {},
  GraphQLContext,
  MutationCreateEntityArgs
> = async (_, { namespace, namespaceId, properties, type }, { dataSources }) => {
  if (!namespace && !namespaceId) {
    throw new UserInputError(
      "One of namespace or namespaceId must be provided"
    );
  }
  if (!namespaceId) {
    namespaceId = await namespaceIdFromNamespaceName(namespace!);
  }

  const now = new Date();
  const entityID = Uuid4.generate().toCanonical();

  const entity: DbUnknownEntity = {
    id: entityID,
    namespaceId,
    properties: properties,
    namespace: namespace ?? undefined,
    createdById: "1",
    type,
    updatedAt: now,
    createdAt: now,
    visibility: Visibility.Public,
  };

  entities.push(entity);

  await dataSources.db.createEntity({
    namespaceId: Uuid4.fromCanonical(namespaceId),
    type: type,
    properties: properties,
  });


  return entity;
};
