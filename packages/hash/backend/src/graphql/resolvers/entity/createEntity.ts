import { UserInputError } from "apollo-server-express";

import { entities } from "../../../mockData/entities";
import { DbUnknownEntity } from "../../../types/dbTypes";
import {
  MutationCreateEntityArgs,
  Resolver,
  Visibility,
} from "../../autoGeneratedTypes";
import { namespaceIdFromNamespaceName } from "../shared/namespace";
import { GraphQLContext } from "../../context";


export const createEntity: Resolver<
  Promise<DbUnknownEntity>,
  {},
  GraphQLContext,
  MutationCreateEntityArgs
> = async (_, { namespace, namespaceId, createdById, properties, type }, { dataSources }) => {
  if (!namespace && !namespaceId) {
    throw new UserInputError(
      "One of namespace or namespaceId must be provided"
    );
  }
  if (!namespaceId) {
    namespaceId = await namespaceIdFromNamespaceName(namespace!);
  }

  const e = await dataSources.db.createEntity({
    namespaceId, createdById, type, properties
  });

  const entity: DbUnknownEntity = {
    id: e.id,
    namespaceId: e.namespaceId,
    namespace: "TODO",
    properties: e.properties,
    createdById: e.createdById,
    type: e.type,
    createdAt: e.createdAt,
    updatedAt: e.updatedAt,
    visibility: Visibility.Public, // TODO: should be a param?
  };

  // TODO: remove this when all resolvers have DB implementations
  entities.push(entity);

  return entity;
};
