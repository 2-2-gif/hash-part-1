import fetch from "node-fetch";
import { ApolloError } from "apollo-server-errors";

import { EmbedOptions, OembedResponse } from "src/types/embedTypes";
import { Embed, Resolver } from "../../autoGeneratedTypes";

import oEmbedData from "oembed-providers/providers.json";
// oembed-providers/providers.json";

import { GraphQLContext } from "../../context";

interface Endpoint {
  schemes?: string[];
  url: string;
  discovery: boolean;
  formats: string[];
}

interface IoEmbedData {
  provider_name: string;
  provider_url: string;
  endpoints: Endpoint[];
}

async function getEmbedResponse({ url, type }: { url: string; type?: string }) {
  let oembedEndpoint = undefined;

  if (!type) {
    (oEmbedData as IoEmbedData[]).find((oembed) => {
      oembed.endpoints.find((endpoint) =>
        endpoint.schemes?.find((scheme) => {
          if (
            scheme.split("*").every((substring) => url.search(substring) > -1)
          ) {
            oembedEndpoint = endpoint.url;
            return true;
          }

          return false;
        })
      );
    });
  } else {
    const oembed = (oEmbedData as IoEmbedData[]).find(
      (oembed) => oembed.provider_name === type
    );

    oembed?.endpoints.find((endpoint) =>
      endpoint.schemes?.find((scheme) => {
        if (
          scheme.split("*").every((substring) => url.search(substring) > -1)
        ) {
          oembedEndpoint = endpoint.url;
          return true;
        }

        return false;
      })
    );
  }

  if (!oembedEndpoint) {
    return {
      error: true,
    };
  }

  return await fetch(`${oembedEndpoint}?url=${url}`).then((response) =>
    response.json()
  );
}

export const embedCode: Resolver<
  Promise<Embed>,
  {},
  GraphQLContext,
  { url: string; type?: EmbedOptions }
> = async (_, { url, type }, {}, {}) => {
  const embedResponse: OembedResponse & { error: boolean } =
    await getEmbedResponse({
      url,
      type,
    }).catch((err) => {
      console.error(err);
      throw new ApolloError(`Embed Code for URL ${url} not found`, "NOT_FOUND");
    });

  const { html, error, provider_name } = embedResponse;

  if (error) {
    throw new ApolloError(`Embed Code for URL ${url} not found`, "NOT_FOUND");
  }

  return {
    html,
    providerName: provider_name
  };
};
