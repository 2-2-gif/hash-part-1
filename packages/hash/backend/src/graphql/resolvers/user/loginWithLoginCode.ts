import { ApolloError } from "apollo-server-express";

import {
  LOGIN_CODE_MAX_AGE,
  LOGIN_CODE_MAX_ATTEMPTS,
} from "../../../auth/passport/PasswordlessStrategy";
import {
  MutationLoginWithLoginCodeArgs,
  Resolver,
  LoginWithLoginCodeResponse,
} from "../../autoGeneratedTypes";
import { GraphQLContext } from "../../context";

export const loginWithLoginCode: Resolver<
  LoginWithLoginCodeResponse,
  {},
  GraphQLContext,
  MutationLoginWithLoginCodeArgs
> = async (
  _,
  { emailOrShortname, loginId, ...args },
  { dataSources, passport }
) => {
  const user = await dataSources.db
    .getUserByEmail({ email: emailOrShortname })
    .then(
      (user) =>
        user ||
        dataSources.db
          .getUserByShortname({ shortname: emailOrShortname })
          .then((user) => {
            if (!user)
              throw new ApolloError(
                `A user with the email or shortname '${emailOrShortname}' could not be found.`,
                "NOT_FOUND"
              );
            return user;
          })
    );

  const loginCode = await dataSources.db.getLoginCode({
    userId: user.id,
    loginId,
  });

  // If a login code with the provided userId and loginId is not found
  if (!loginCode) return LoginWithLoginCodeResponse.NotFound;
  // If the login code's maximum number of attempts has been exceeded
  if (loginCode.numberOfAttempts >= LOGIN_CODE_MAX_ATTEMPTS)
    return LoginWithLoginCodeResponse.MaxAttempts;
  // If the login code has expired
  if (loginCode.createdAt.getTime() < new Date().getTime() - LOGIN_CODE_MAX_AGE)
    return LoginWithLoginCodeResponse.Expired;

  // Otherwise, let's check if the provided code matches the login code
  if (loginCode.code === args.loginCode) {
    passport.login(user, {});
    return LoginWithLoginCodeResponse.Success;
  }

  return dataSources.db
    .incrementLoginCodeAttempts({ loginCode })
    .then(() => LoginWithLoginCodeResponse.Incorrect);
};
