import { ApolloError } from "apollo-server-express";

import {
  LOGIN_CODE_MAX_AGE,
  LOGIN_CODE_MAX_ATTEMPTS,
} from "../../../auth/passport/PasswordlessStrategy";
import { DbUser } from "../../../types/dbTypes";
import {
  MutationLoginWithLoginCodeArgs,
  Resolver,
  LoginWithLoginCodeResponse,
} from "../../autoGeneratedTypes";
import { GraphQLContext } from "../../context";

export const loginWithLoginCode: Resolver<
  LoginWithLoginCodeResponse,
  {},
  GraphQLContext,
  MutationLoginWithLoginCodeArgs
> = async (
  _,
  { userIdentifier, loginId, ...args },
  { dataSources, passport }
) => {
  const { email, shortname } = userIdentifier;

  let user: DbUser | null;

  if (email) {
    user = await dataSources.db.getUserByEmail({ email });
  } else if (shortname) {
    user = await dataSources.db.getUserByShortname({ shortname });
  } else {
    throw new ApolloError(
      "An email or shortname must be provided to receive a login code"
    );
  }

  if (!user)
    throw new ApolloError(
      `User with ${email ? "email" : "shortname"} '${
        email || shortname
      }' does not exist`,
      "NOT_FOUND"
    );

  const loginCode = await dataSources.db.getLoginCode({
    userId: user.id,
    loginId,
  });

  // If a login code with the provided userId and loginId is not found
  if (!loginCode) return LoginWithLoginCodeResponse.NotFound;
  // If the login code's maximum number of attempts has been exceeded
  if (loginCode.numberOfAttempts >= LOGIN_CODE_MAX_ATTEMPTS)
    return LoginWithLoginCodeResponse.MaxAttempts;
  // If the login code has expired
  if (loginCode.createdAt.getTime() < new Date().getTime() - LOGIN_CODE_MAX_AGE)
    return LoginWithLoginCodeResponse.Expired;

  // Otherwise, let's check if the provided code matches the login code
  if (loginCode.code === args.loginCode) {
    passport.login(user, {});
    return LoginWithLoginCodeResponse.Success;
  }

  return dataSources.db
    .incrementLoginCodeAttempts({ loginCode })
    .then(() => LoginWithLoginCodeResponse.Incorrect);
};
