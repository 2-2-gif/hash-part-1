import { ApolloError } from "apollo-server-express";

import {
  MutationSendLoginCodeArgs,
  LoginCodeMetadata,
  Resolver,
} from "../../autoGeneratedTypes";
import { GraphQLContext } from "../../context";
import { GraphQLPasswordlessStrategy } from "../../../auth/passport/PasswordlessStrategy";
import { sendLoginCodeToUser } from "../../../email";

export const sendLoginCode: Resolver<
  Promise<LoginCodeMetadata>,
  {},
  GraphQLContext,
  MutationSendLoginCodeArgs
> = async (_, { emailOrShortname }, { dataSources }) => {
  const user = await dataSources.db
    .getUserByEmail({ email: emailOrShortname })
    .then(
      (user) =>
        user ||
        dataSources.db
          .getUserByShortname({ shortname: emailOrShortname })
          .then((user) => {
            if (!user)
              throw new ApolloError(
                `A user with the email or shortname '${emailOrShortname}' could not be found.`,
                "NOT_FOUND"
              );
            return user;
          })
    );

  const loginCode = await dataSources.db.createLoginCode({
    userId: user.id,
    code: GraphQLPasswordlessStrategy.generateLoginCode(),
  });

  return sendLoginCodeToUser(loginCode, user).then(() => ({
    id: loginCode.id,
    userId: user.id,
    createdAt: loginCode.createdAt,
  }));
};
