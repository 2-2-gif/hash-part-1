import { ApolloError } from "apollo-server-express";

import { DbUser } from "../../../types/dbTypes";
import {
  MutationSendLoginCodeArgs,
  SendLoginCodeResponse,
  Resolver,
} from "../../autoGeneratedTypes";
import { GraphQLContext } from "../../context";
import { GraphQLPasswordlessStrategy } from "../../../auth/passport/PasswordlessStrategy";
import { sendLoginCodeToUser } from "../../../email";

export const sendLoginCode: Resolver<
  Promise<SendLoginCodeResponse>,
  {},
  GraphQLContext,
  MutationSendLoginCodeArgs
> = async (_, { userIdentifier }, { dataSources }) => {
  const { email, shortname } = userIdentifier;

  let user: DbUser | null;

  if (email) {
    user = await dataSources.db.getUserByEmail({ email });
  } else if (shortname) {
    user = await dataSources.db.getUserByShortname({ shortname });
  } else {
    throw new ApolloError(
      "An email or shortname must be provided to receive a login code"
    );
  }

  if (!user)
    throw new ApolloError(
      `User with ${email ? "email" : "shortname"} '${
        email || shortname
      }' does not exist`,
      "NOT_FOUND"
    );

  const loginCode = await dataSources.db.createLoginCode({
    accountId: user.accountId,
    userEntityId: user.id,
    loginCode: GraphQLPasswordlessStrategy.generateLoginCode(),
  });

  return sendLoginCodeToUser(loginCode, user).then(
    () => SendLoginCodeResponse.SentLoginCode
  );
};
