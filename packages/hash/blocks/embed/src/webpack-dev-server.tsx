/**
 * This is the entry point for developing and debugging.
 * This file is not bundled with the library during the build process.
 */
import React, { useState } from "react";
import ReactDOM from "react-dom";
import Component from "./index";

import { ApolloProvider, useQuery } from "@apollo/client";
import { getEmbedCode } from "../dev_src/graphql/queries/embed.queries";
import { ProviderNames } from "./types/embedTypes";
import { createApolloClient } from "../dev_src/graphql/createApolloClient";
import {
  GetEmbedCodeQuery,
  GetEmbedCodeQueryVariables,
} from "../dev_src/graphql/autoGeneratedTypes";

const node = document.getElementById("app");

const apolloClient = createApolloClient();

function AppComponent() {
  const [blockState, setBlockState] = useState<{
    url: string;
    type?: ProviderNames;
  }>({ url: "", type: undefined });

  const { url, type } = blockState;

  const [data, setData] = useState<GetEmbedCodeQuery | undefined>(undefined);
  const [error, setError] =
    useState<{ message: string } | undefined>(undefined);

  // const { data, error, loading } = useQuery<
  //   GetEmbedCodeQuery,
  //   GetEmbedCodeQueryVariables
  // >(getEmbedCode, {
  //   variables: { url, type },
  // });

  // console.log(url, type, data);

  function getEmbedBlock(url: string, type?: ProviderNames) {
    setBlockState({ url, type });

    fetch("http://localhost:5001/graphql", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        // 'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: JSON.stringify({
        operationName: "getEmbedCode",
        variables: { url, type },
        query:
          "query getEmbedCode($url: String!, $type: String) {\n  embedCode(url: $url, type: $type) {\n    html\n    providerName\n    __typename\n  }\n}\n",
      }),
    })
      .then((response) => response.json())
      .then((responseData) => {
        if (responseData.errors) {
          setError(responseData.errors[0]);
        }

        setData(responseData.data);
      });
  }

  console.log(data, data?.embedCode.html);

  return (
    <>
      <Component
        getEmbedBlock={getEmbedBlock}
        html={data?.embedCode.html}
        errorString={error?.message}
      />
    </>
  );
}

const App = () => {
  return (
    <>
      <ApolloProvider client={apolloClient}>
        <AppComponent />
      </ApolloProvider>
    </>
  );
};

ReactDOM.render(<App />, node);
