import { useMutation } from "@apollo/client";
import { NextPage } from "next";
import { useRouter } from "next/router";
import { ParsedUrlQueryInput } from "querystring";
import { useEffect, useState } from "react";
import {
  LoginCodeMetadata,
  LoginWithLoginCodeResponse,
  Mutation,
  MutationLoginWithLoginCodeArgs,
  SendLoginCodeMutationVariables,
} from "../graphql/autoGeneratedTypes";
import {
  sendLoginCode as sendLoginCodeMutation,
  loginWithLoginCode as loginWithLoginCodeMutation,
} from "../graphql/queries/user.queries";

type ParsedLoginQuery = {
  loginId: string;
  loginCode: string;
};

const tbdIsParsedLoginQuery = (
  tbd: ParsedUrlQueryInput
): tbd is ParsedLoginQuery =>
  tbd.loginId !== undefined &&
  typeof tbd.loginId === "string" &&
  tbd.loginCode !== undefined &&
  typeof tbd.loginCode === "string";

const LoginPage: NextPage = () => {
  const router = useRouter();

  const [emailOrShortname, setEmailOrShortname] = useState<string>("");

  const [loginCode, setLoginCode] = useState<string>("");
  const [loginCodeMetadata, setLoginCodeMetadata] =
    useState<LoginCodeMetadata | undefined>();

  const [loginWithLoginCodeResponse, setLoginWithLoginCodeResponse] =
    useState<LoginWithLoginCodeResponse | undefined>();

  const [
    sendLoginCode,
    { loading: sendLoginCodeLoading, error: sendLoginCodeError },
  ] = useMutation<Mutation, SendLoginCodeMutationVariables>(
    sendLoginCodeMutation,
    {
      onCompleted: (data) => {
        setLoginCodeMetadata(data?.sendLoginCode);
      },
    }
  );

  const [loginWithLoginCode, { loading: loginWithLoginCodeLoading }] =
    useMutation<Mutation, MutationLoginWithLoginCodeArgs>(
      loginWithLoginCodeMutation,
      {
        onCompleted: (data) => {
          if (data.loginWithLoginCode === "SUCCESS") router.push("/");
          setLoginWithLoginCodeResponse(data.loginWithLoginCode);
        },
      }
    );

  useEffect(() => {
    const { query } = router;

    if (tbdIsParsedLoginQuery(query)) {
      const { loginId, loginCode } = query;
      loginWithLoginCode({ variables: { loginId, loginCode } });
    }
  }, [router, loginWithLoginCode]);

  const reset = () => {
    setEmailOrShortname("");
    setLoginCode("");
    setLoginCodeMetadata(undefined);
    setLoginWithLoginCodeResponse(undefined);
  };

  const emailOrShortnameIsValid = emailOrShortname !== "";

  const loginCodeIsValid = loginCode !== "";

  return (
    <>
      <label>
        Email or Shortname
        <input
          type="text"
          value={emailOrShortname}
          onChange={({ target }) => setEmailOrShortname(target.value)}
          placeholder="Enter your email or shortname to continue"
          disabled={loginCodeMetadata !== undefined}
        />
      </label>
      {loginCodeMetadata ? (
        <>
          <p>Please check your inbox for a temporary login code</p>
          <label>
            Login Code
            <input
              type="text"
              value={loginCode}
              onChange={({ target }) => setLoginCode(target.value)}
              placeholder="Paste your login code"
              disabled={loginWithLoginCodeLoading}
            />
          </label>
          <button onClick={reset}>Cancel</button>
          <button
            disabled={loginWithLoginCodeLoading || !loginCodeIsValid}
            onClick={() =>
              loginWithLoginCode({
                variables: {
                  loginId: loginCodeMetadata.id,
                  loginCode,
                },
              })
            }
          >
            Login
          </button>
          {loginWithLoginCodeResponse && <p>{loginWithLoginCodeResponse}</p>}
        </>
      ) : (
        <>
          <button
            disabled={sendLoginCodeLoading || !emailOrShortnameIsValid}
            onClick={() => sendLoginCode({ variables: { emailOrShortname } })}
          >
            Submit
          </button>
          {sendLoginCodeError && <p>{sendLoginCodeError.message}</p>}
        </>
      )}
    </>
  );
};

export default LoginPage;
