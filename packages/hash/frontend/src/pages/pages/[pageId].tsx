import { VoidFunctionComponent } from "react";

import { useRouter } from "next/router";
import { useQuery } from "@apollo/client";
import { getPageQuery } from "../../graphql/queries/page.queries";
import {
  GetPageQuery,
  GetPageQueryVariables,
} from "../../graphql/autoGeneratedTypes";
import { RemoteBlock } from "../../components/RemoteBlock/RemoteBlock";

export const Page: VoidFunctionComponent = () => {
  const { query } = useRouter();

  const pageId = query.pageId as string;

  const { data, error, loading } = useQuery<
    GetPageQuery,
    GetPageQueryVariables
  >(getPageQuery, {
    variables: { pageId },
  });

  if (loading) {
    return <h1>Loading...</h1>;
  }
  if (error) {
    return <h1>Error: {error.message}</h1>;
  }
  if (!data) {
    return <h1>No data loaded.</h1>;
  }

  const { title, contents } = data.page.properties;

  return (
    <>
      <header>
        <h1>{title}</h1>
      </header>

      <main>
        {contents.map(({ properties }, index) => {
          const props = (properties.entity as any).unknownProperties;
          if (properties.componentId === "tableblock") {
            return (
              <RemoteBlock
                key={index}
                url="http://localhost:5000/main.b176e1b7652bd678962a.js"
                {...props}
              />
            );
          } else {
            return <pre key={index}>{JSON.stringify(props, undefined, 2)}</pre>;
          }
        })}
      </main>
    </>
  );
};

export default Page;
