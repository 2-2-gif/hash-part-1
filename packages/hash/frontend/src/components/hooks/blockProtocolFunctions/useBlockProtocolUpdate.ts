import { useMutation } from "@apollo/client";

import { BlockProtocolUpdateFn } from "../../../types/blockProtocol";
import { updateEntity } from "../../../graphql/queries/entity.queries";
import { useCallback } from "react";
import {
  UpdateEntityMutation,
  UpdateEntityMutationVariables,
} from "../../../graphql/autoGeneratedTypes";

export const useBlockProtocolUpdate = (): {
  update: BlockProtocolUpdateFn;
  updateLoading: boolean;
  updateError: any;
} => {
  const [
    updateEntityFn,
    { loading: updateEntityLoading, error: updateEntityError },
  ] =
    useMutation<UpdateEntityMutation, UpdateEntityMutationVariables>(
      updateEntity
    );

  const [updatePageFn, { loading: updatePageLoading, error: updatePageError }] =
    useMutation<UpdateEntityMutation, UpdateEntityMutationVariables>(
      updateEntity
    );

  const update: BlockProtocolUpdateFn = useCallback((actions) => {
    for (const action of actions) {
      (action.entityType === "Page" ? updatePageFn : updateEntityFn)({
        variables: {
          id: action.entityId,
          properties: action.data,
        },
      });
    }
  }, []);

  const updateLoading = updateEntityLoading || updatePageLoading;
  const updateError = updateEntityError ?? updatePageError;

  return {
    update,
    updateLoading,
    updateError,
  };
};
