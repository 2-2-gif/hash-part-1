import { useMutation } from "@apollo/client";

import { BlockProtocolUpdateFn } from "../../../types/blockProtocol";
import { updateEntity } from "../../../graphql/queries/entity.queries";
import { useCallback } from "react";
import {
  InsertBlockIntoPageMutation,
  InsertBlockIntoPageMutationVariables,
  UpdateEntityMutation,
  UpdateEntityMutationVariables,
  UpdatePageMutation,
  UpdatePageMutationVariables,
} from "../../../graphql/autoGeneratedTypes";
import { apolloClient } from "../../../pages/_app";
import {
  insertBlockIntoPage,
  updatePage,
} from "../../../graphql/queries/page.queries";

type InsertIntoPageFn = (
  variables: InsertBlockIntoPageMutationVariables
) => void;

export const useBlockProtocolInsertIntoPage = (): {
  insert: InsertIntoPageFn;
  insertLoading: boolean;
  insertError: any;
} => {
  // temporary hack to refetch page data after a mutation.
  // TODO: make caching of entities outside of GraphQL schema work
  // so that updates to those entities are reflected w/o doing this
  const onCompleted = () => apolloClient.reFetchObservableQueries();

  const [insertFn, { loading, error }] = useMutation<
    InsertBlockIntoPageMutation,
    InsertBlockIntoPageMutationVariables
  >(insertBlockIntoPage, { onCompleted });

  const update: InsertIntoPageFn = useCallback((variables) => {
    insertFn({
      variables,
    });
  }, []);

  return {
    insert: update,
    insertLoading: loading,
    insertError: error,
  };
};
