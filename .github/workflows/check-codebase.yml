name: Check codebase
on: pull_request

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/warm-up-repo

      - name: Run yarn lint:eslint
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:eslint; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:eslint` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:markdownlint
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:markdownlint; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:markdownlint` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:prettier
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:prettier; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:prettier` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:tsc
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:tsc; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Please fix the above errors locally for the check to pass.'
            echo 'If you don’t see them, try merging target branch into yours.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

        ## TODO: Replace with `yarn fix:yarn-dedupe` after upgrading to Yarn v3+
        ## https://yarnpkg.com/cli/dedupe
        ## https://github.com/yarnpkg/berry/issues/2297
      - name: Run yarn lint:yarn-deduplicate
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:yarn-deduplicate; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Some dependencies can be deduplicated, which will make node_modules'
            echo 'lighter and potentially save us from unexplainable bugs.'
            echo 'Please run `yarn fix:yarn-deduplicate` locally and commit yarn.lock.'
            echo 'You may need to run the command 2-3 times in some rare cases.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

        ## yarn --frozen-lockfile does not work for monorepos, so using a workaround:
        ## https://github.com/yarnpkg/yarn/issues/5840#issuecomment-467516207
        ## TODO: Use `yarn install --immutable` after upgrading to Yarn v3+
      - name: Check yarn.lock stability
        if: ${{ success() || failure() }}
        run: |
          git diff yarn.lock
          if ! git diff --exit-code yarn.lock; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Changes were detected in yarn.lock file after running `yarn install`.'
            echo 'This makes runtime less stable, so should be avoided.'
            echo 'Please run `yarn install` locally and commit yarn.lock.'
            echo 'You may also want to run `yarn fix:yarn-deduplicate` just in case.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1;
          fi

  backend-integration-tests:
    name: Backend integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/warm-up-repo

      - run: yarn codegen
        if: ${{ success() || failure() }}

      - name: Build backend images
        run: yarn rebuild:backend
        if: ${{ success() || failure() }}

      - name: Launch backend in test mode
        run: |
          docker volume create --name=hash-dev-pg
          yarn serve:hash-backend & ## ampersand enables background mode
          npx wait-on --timeout $(expr 1000 \* 60 \* 2) http://localhost:5001
        if: ${{ success() || failure() }}
        env:
          AWS_REGION: na
          AWS_ACCESS_KEY_ID: na
          AWS_SECRET_ACCESS_KEY: na
          AWS_S3_UPLOADS_BUCKET: na
          HASH_PG_DATABASE: backend_integration_tests
          NODE_ENV: test

      - run: docker ps --all
        if: ${{ success() || failure() }}

      - run: yarn test:backend-integration
        if: ${{ success() || failure() }}
        env:
          HASH_PG_DATABASE: backend_integration_tests

      - run: docker logs docker_hash-dev-api_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-opensearch_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-pg_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-realtime_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-redis_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-search-loader_1
        if: ${{ success() || failure() }}

      - run: docker ps --all
        if: ${{ success() || failure() }}

  playwright-tests:
    name: Playwright tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/warm-up-repo

      - run: yarn codegen
        if: ${{ success() || failure() }}

      - name: Build backend images
        run: yarn rebuild:backend
        if: ${{ success() || failure() }}

      - name: Launch backend
        run: |
          docker volume create --name=hash-dev-pg
          yarn serve:hash-backend & ## ampersand enables background mode
          npx wait-on --timeout $(expr 1000 \* 60 \* 2) tcp:localhost:5001
          yarn seed-db & ## ampersand enables background mode
          npx wait-on --timeout $(expr 1000 \* 60 \* 2) http://localhost:5001
        if: ${{ success() || failure() }}
        env:
          AWS_REGION: na
          AWS_ACCESS_KEY_ID: na
          AWS_SECRET_ACCESS_KEY: na
          AWS_S3_UPLOADS_BUCKET: na
          HASH_PG_DATABASE: playwright

      - run: docker ps --all
        if: ${{ success() || failure() }}

      - name: Build and launch frontend
        if: ${{ success() || failure() }}
        run: |
          yarn workspace @hashintel/hash-frontend next build ## not using plain build script to skip codegen call
          yarn workspace @hashintel/hash-frontend start & ## ampersand enables background mode
          npx wait-on --timeout $(expr 1000 \* 60 \* 2) http://localhost:3000
        env:
          NEXT_PUBLIC_COLLAB: true

      - run: yarn playwright install-deps
        if: ${{ success() || failure() }}

      - run: yarn test:playwright
        if: ${{ success() || failure() }}

      - uses: actions/upload-artifact@v2
        if: ${{ success() || failure() }}
        with:
          name: playwright-report
          path: playwright-report

      - run: docker logs docker_hash-dev-api_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-opensearch_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-pg_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-realtime_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-redis_1
        if: ${{ success() || failure() }}

      - run: docker logs docker_hash-dev-search-loader_1
        if: ${{ success() || failure() }}

      - run: docker ps --all
        if: ${{ success() || failure() }}

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/warm-up-repo

      - run: yarn test:unit
        if: ${{ success() || failure() }}
